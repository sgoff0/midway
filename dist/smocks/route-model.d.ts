import Variant, { VariantData } from './variant-model';
import { Smocks } from '.';
import * as Hapi from '@hapi/hapi';
export interface RouteData {
    handler: (request: Hapi.Request, h: Hapi.ResponseToolkit) => Hapi.Lifecycle.ReturnValue;
    id: string;
    label: string;
    method: string;
    path: string;
    display?: string;
    group?: string;
    actions?: any;
    config?: any;
    input?: any;
    meta?: any;
    variantLabel?: string;
}
declare class Route {
    private _mocker;
    private _label;
    _path: string;
    _method: string;
    private _group;
    _id: any;
    private _config;
    private _input;
    private _meta;
    private _variants;
    _orderedVariants: any;
    private _actions;
    private _display;
    private _activeVariant;
    private _hasVariants;
    mockedDirectory: string;
    constructor(data: RouteData, mocker: Smocks);
    actions: {
        get: () => any;
        execute: (id: any, input: any, request: any) => any;
    };
    id: () => any;
    method: () => string;
    group: () => any;
    path: () => string;
    action: (id: any, options: any) => this;
    display: (displayFunc: any) => any;
    getDisplayValue: (request: any) => any;
    label: (label?: any) => any;
    applyProfile: (profile: any, request: any) => void;
    variant: (data: VariantData) => Variant;
    variants: () => any[];
    getVariant: (id?: any) => any;
    selectVariant: (id: any, request: any) => Error;
    getActiveVariant: (request: Hapi.Request) => any;
    hasVariants: () => any;
    respondWith: (responder: any) => Variant;
    respondWithFile: (options: any) => Variant;
    activeVariant: (request: Hapi.Request) => any;
    done: () => Smocks;
    input: (input?: any) => any;
    config: (config?: any) => any;
    meta: (meta: any) => any;
    resetRouteVariant: (request: any) => void;
    resetSelectedInput: (request: any) => void;
    selectRouteInput: (selectedInput: any, request: any) => this;
    selectedRouteInput: (request: any) => any;
    getInputValue: (id: any, request: any) => any;
    selectedVariantInput: (variant: Variant, request: Hapi.Request) => any;
    selectVariantInput: (selectedInput: any, variant: any, request: any) => void;
    getMetaValue: (id: any) => any;
    _handleRequest: (request: any, h: Hapi.ResponseToolkit) => Promise<any>;
    route: (data: any) => Route;
}
export default Route;
